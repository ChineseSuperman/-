最近做了一个歌曲演唱互动排名的功能，现将设计思路提取出来，以便后用。
需求：歌曲排行榜，分为两部分，总榜和最新榜，最新的很简单，数据库记录时间戳，拿到最新的用户即可，总榜较为复杂，排名是依据总分，总分分为两部分：1.歌曲演唱打分（机器，不用考虑）；
2.人气值，来源：其他用户点赞。获取到两部分数据后要加权生成总分，然后再排名。如果只是小范围应用好解决，直接mysql搞定；但是考虑到大量用户，大范围应用，以及要做就做好的原则。
功能做成的同时必须兼具效率。并且要求权重灵活好配，这好说，redis每一期的配置中添加字段即可。
分析：
工具：mysql，redis（主要用了页面缓存和zset功能）
需要处理的几个值：
1.演唱分数sc；2.人气值pv；3.总分total；4.排名rank；5.redis zset中的index，zindex，6.缓存页码p，7.页面容量psize
关系：
total = pv*weight_for_pv + sc*weight_for_sc
rank = zindex + 1
设计思路：
1.用户报名，计算总分后，添加到redis的zset，再将得到的排名一并添加到mysql中；
2.用户点赞后，将变更后的人气值，总分，更新到zset，然后将算出的排名一并更新至mysql；
排名变更处理：
说明：这块是最复杂，总重要也最易出错的
场景：初次报名，二次报名（由于要求一人一做，所以二次报名我们用的替换的逻辑，所以会有排名变更的问题），点赞
处理：
1.排名上升：
被超越的用户排名加1，注意名次rank从小到大排列，然后更新对应页码的缓存 ，p_max = rank_max//10 +1,p_min = rank_min//10+1，注：//是整除。然后清理页码在（p_min,p_max）区间的缓存
2.排名下降：
被超越的用户排名加-1，其它同上
3.排名不变：不处理
redis我们只存的id，可以存整条数据，但成本高，没必要；查询时先从zset中检索出id，根据id从mysql中检索数据，然后再对该页面缓存，效率一样很高，而且内存也能节省不少
总结：
redis zset和mysql配合做排行榜很好用，但需注意排名变更的处理。
